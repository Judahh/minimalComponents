import { Component } from 'react';
declare type PropTypes = {
    lastPage?: number;
    page?: number;
    pages?: number;
    setPages?: any;
    pageSize?: number;
    infiniteScroll?: boolean;
    populate?: any;
    timer?: boolean;
    timeoutSize?: number;
    rootMargin?: string;
    threshold?: number;
    elements?: any[];
    pageSelector?: string;
    setPageSelector?: any;
    other?: any;
    numberOfElements?: number;
    loading?: boolean;
    setLoading?: any;
};
declare type StateTypes = {
    lastPage?: number;
    page?: number;
    pages?: number;
    setPages?: any;
    pageSize?: number;
    infiniteScroll?: boolean;
    populate?: any;
    startup?: boolean;
    timer?: boolean;
    timeoutSize?: number;
    rootMargin: string;
    threshold: number;
    elements?: any[];
    pageSelector?: string;
    setPageSelector?: any;
    other?: any;
    numberOfElements?: number;
    loading?: boolean;
    setLoading?: any;
};
export default class Paginate extends Component<PropTypes, StateTypes> {
    constructor(props: PropTypes);
    static getElements(infiniteScroll?: any, elements?: any, received?: any, setElements?: any, _setPageSelector?: any): Promise<any>;
    componentDidMount(): Promise<void>;
    componentDidUpdate(prevProps: PropTypes): Promise<void>;
    timeoutSetter(): Promise<void>;
    clearTimer(): Promise<void>;
    isLocked(): Promise<boolean>;
    retrive(currentPage: any, nextPage: any): Promise<any>;
    clear(): Promise<void>;
    deleteRefresh(): Promise<void>;
    refresh(): Promise<void>;
    goToPage(nextPage?: number): Promise<void>;
    goToNextPage(): Promise<void>;
    goToFirstPage(): Promise<void>;
    goToLastPage(): Promise<void>;
    handleIntersection(_inView: any, _entry: any): Promise<void>;
    handlePageClick(event: any): Promise<void>;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=index.d.ts.map